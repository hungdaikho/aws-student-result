"use strict";exports.id=8699,exports.ids=[8699],exports.modules={4738:(e,t,n)=>{n.d(t,{_:()=>o});var a=n(3524);let s=globalThis,o=(()=>{if(process.env.DATABASE_URL)return s.prisma??new a.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}},__internal:{engine:{connectionLimit:5,queryTimeout:15e3,connectionTimeout:5e3,pool:{min:1,max:5,acquireTimeoutMillis:15e3,createTimeoutMillis:15e3,destroyTimeoutMillis:3e3,idleTimeoutMillis:15e3,reapIntervalMillis:500,createRetryIntervalMillis:100}}}})})();o&&process.on("beforeExit",async()=>{try{await Promise.race([o.$disconnect(),new Promise(e=>setTimeout(e,5e3))])}catch(e){console.error("Error disconnecting Prisma:",e)}}),process.on("uncaughtException",async e=>{console.error("Uncaught Exception:",e);try{o&&await o.$disconnect()}catch(e){console.error("Error disconnecting Prisma on uncaught exception:",e)}process.exit(1)})},8699:(e,t,n)=>{n.d(t,{VT:()=>m});var a=n(4738);class s{set(e,t,n=this.defaultTTL){this.cache.set(e,{data:t,timestamp:Date.now(),ttl:n})}get(e){let t=this.cache.get(e);return t?Date.now()-t.timestamp>t.ttl?(this.cache.delete(e),null):t.data:null}delete(e){this.cache.delete(e)}clear(){this.cache.clear()}cleanup(){let e=Date.now();for(let[t,n]of this.cache.entries())e-n.timestamp>n.ttl&&this.cache.delete(t)}getStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())}}constructor(){this.cache=new Map,this.defaultTTL=3e5}}let o=new s;setInterval(()=>{o.cleanup()},6e4);let i={STATISTICS:(e,t,n)=>`stats:${e}:${t}:${n||"null"}`,LEADERBOARD:(e,t,n)=>`leaderboard:${e}:${t}:${n||"null"}`,WILAYAS:(e,t,n)=>`wilayas:${e}:${t}:${n||"null"}`,STUDENT:(e,t,n,a)=>`student:${e}:${t}:${n}:${a||"null"}`,DATABASE_INFO:"database:info"};function r(e,t,n=3e5){return async(...a)=>{let s=t(...a),i=o.get(s);if(i)return i;let r=await e(...a);return o.set(s,r,n),r}}var l=n(1224);let c=new(n(2823)).c({region:process.env.AWS_REGION||"us-east-1",...process.env.DYNAMO_ENDPOINT?{endpoint:process.env.DYNAMO_ENDPOINT}:{}});function d(e){return{...e,examType:e.examType,sessionType:e.sessionType,wilaya:e.wilaya||void 0,moughataa:e.moughataa||void 0,rang_etablissement:e.rang_etablissement||void 0,lieu_nais:e.lieu_nais||void 0,date_naiss:e.date_naiss||void 0}}l.m1.from(c,{marshallOptions:{removeUndefinedValues:!0}}),process.env.DYNAMO_TABLE;let u={studentSelect:{id:!0,matricule:!0,nom_complet:!0,ecole:!0,etablissement:!0,moyenne:!0,rang:!0,admis:!0,decision_text:!0,section:!0,wilaya:!0,moughataa:!0,rang_etablissement:!0,year:!0,examType:!0,sessionType:!0,lieu_nais:!0,date_naiss:!0,createdAt:!0,updatedAt:!0},leaderboardSelect:{id:!0,matricule:!0,nom_complet:!0,ecole:!0,etablissement:!0,moyenne:!0,rang:!0,wilaya:!0,moughataa:!0,section:!0,admis:!0,decision_text:!0}};class m{static{this.findStudentByMatricule=r(async(e,t,n,s,o)=>{try{let i;if("CONCOURS"===n&&!o)throw Error("Search by matricule is not supported for CONCOURS exams");if("BAC"===n&&!s)throw Error("Session type is required for BAC exams");if(!(i="BAC"===n?await a._.student.findUnique({where:{matricule_year_examType_sessionType:{matricule:e,year:t,examType:n,sessionType:s}},select:u.studentSelect}):await a._.student.findFirst({where:{matricule:e,year:t,examType:n,sessionType:null},select:u.studentSelect})))return null;return d(i)}catch(e){throw console.error("Error in findStudentByMatricule:",e),e}},(e,t,n,a)=>i.STUDENT(e,t,n,a),6e5)}static{this.findStudentByMatriculeAndSchool=async(e,t,n,s)=>{try{console.log(`🔍 Finding student with matricule ${e} in school ${s} for ${n} ${t}`);let o=await a._.student.findMany({where:{matricule:e,year:t,examType:n,sessionType:null},select:{etablissement:!0},distinct:["etablissement"]});console.log(`🔍 Available schools for matricule ${e}:`,o.map(e=>e.etablissement));let i=await a._.student.findFirst({where:{matricule:e,year:t,examType:n,etablissement:s,sessionType:null},select:u.studentSelect});if(i)return console.log(`✅ Found student: ${i.nom_complet} in school ${s}`),d(i);return console.log(`❌ No student found with matricule ${e} in school ${s}`),null}catch(e){throw console.error("Error in findStudentByMatriculeAndSchool:",e),e}}}static{this.findStudentByNameAndSchool=async(e,t,n,s,o)=>{try{console.log(`🔍 Finding student with name ${e} in school ${s} for ${n} ${t}`);let i={nom_complet:e,year:t,examType:n,etablissement:s,sessionType:null};o&&(i.wilaya=o);let r=await a._.student.findFirst({where:i,select:u.studentSelect});if(r)return console.log(`✅ Found student: ${r.nom_complet} in school ${s}`),d(r);return console.log(`❌ No student found with name ${e} in school ${s}`),null}catch(e){throw console.error("Error in findStudentByNameAndSchool:",e),e}}}static{this.findStudentByLocation=async(e,t,n,s,o)=>{try{console.log(`🔍 Finding student in wilaya=${e}, moughataa=${t}, etablissement=${n} for ${o} ${s}`);let i=await a._.student.findFirst({where:{wilaya:e,moughataa:t,etablissement:n,year:s,examType:o,sessionType:null},select:u.studentSelect});if(i)return console.log(`✅ Found student: ${i.nom_complet} in ${e}/${t}/${n}`),d(i);return console.log(`❌ No student found in ${e}/${t}/${n}`),null}catch(e){throw console.error("Error in findStudentByLocation:",e),e}}}static{this.findStudentByNameAndLocation=async(e,t,n,s,o,i)=>{try{console.log(`🔍 Finding student with name ${e} in ${t}/${n}/${s} for ${i} ${o}`);let r=await a._.student.findFirst({where:{nom_complet:e,wilaya:t,moughataa:n,etablissement:s,year:o,examType:i,sessionType:null},select:u.studentSelect});if(r)return console.log(`✅ Found student: ${r.nom_complet} in ${t}/${n}/${s}`),d(r);if(console.log(`❌ Exact match failed, trying without etablissement...`),r=await a._.student.findFirst({where:{nom_complet:e,wilaya:t,moughataa:n,year:o,examType:i,sessionType:null},select:u.studentSelect}))return console.log(`✅ Found student: ${r.nom_complet} in ${t}/${n} (without etablissement filter)`),d(r);if(console.log(`❌ Still no match, trying with just name and wilaya...`),r=await a._.student.findFirst({where:{nom_complet:e,wilaya:t,year:o,examType:i,sessionType:null},select:u.studentSelect}))return console.log(`✅ Found student: ${r.nom_complet} in ${t} (fallback search)`),d(r);return console.log(`❌ No student found with name ${e} in any location combination`),null}catch(e){throw console.error("Error in findStudentByNameAndLocation:",e),e}}}static async getStudents(e,t){try{let n={};return e&&(n.year=e),t&&(n.examType=t),(await a._.student.findMany({where:n,select:u.studentSelect,orderBy:{rang:"asc"}})).map(d)}catch(e){throw console.error("Error in getStudents:",e),e}}static async clearData(e,t,n){try{let s=await a._.$transaction(async a=>{let s={year:e,examType:t};n&&(s.sessionType=n);let o=await a.student.deleteMany({where:s});return await a.dataUpload.deleteMany({where:s}),o.count});return o.delete(i.STATISTICS(e,t,n)),o.delete(i.LEADERBOARD(e,t,n)),o.delete(i.WILAYAS(e,t,n)),o.delete(i.DATABASE_INFO),s}catch(e){throw console.error("Error in clearData:",e),e}}static{this.getStatistics=r(async(e,t,n)=>{try{let s={year:e,examType:t};if("BAC"===t){if(!n)throw Error("Session type is required for BAC exams");s.sessionType=n}else s.sessionType=null;let[o,i,r,l]=await Promise.all([a._.student.count({where:s}),a._.student.count({where:{...s,admis:!0}}),a._.student.aggregate({where:s,_avg:{moyenne:!0}}),a._.student.findMany({where:s,select:{admis:!0,moyenne:!0,section:!0,wilaya:!0}})]),c=l.filter(e=>!e.admis&&e.moyenne>=8).length,d=o>0?(c/o*100).toFixed(1):"0.0",u=l.reduce((e,t)=>{let n=t.section||"Non sp\xe9cifi\xe9";return e[n]||(e[n]={total:0,admitted:0}),e[n].total++,t.admis&&e[n].admitted++,e},{}),m=Object.entries(u).map(([e,t])=>({name:e,total:t.total,admitted:t.admitted,rate:t.total>0?(t.admitted/t.total*100).toFixed(1):"0.0"})).sort((e,t)=>t.total-e.total),y=l.reduce((e,t)=>{let n=t.wilaya||"Non sp\xe9cifi\xe9";return e[n]||(e[n]={total:0,admitted:0}),e[n].total++,t.admis&&e[n].admitted++,e},{}),h=Object.entries(y).map(([e,t])=>({name:e,total:t.total,admitted:t.admitted,rate:t.total>0?(t.admitted/t.total*100).toFixed(1):"0.0"})).sort((e,t)=>t.total-e.total);return{totalStudents:o,admittedStudents:i,admissionRate:(Math.round(100*(o>0?i/o*100:0))/100).toString(),sessionnaireRate:d,averageScore:(r._avg.moyenne?Math.round(100*r._avg.moyenne)/100:0).toString(),sectionStats:m,wilayaStats:h,year:e,examType:t}}catch(e){throw console.error("Error in getStatistics:",e),e}},(e,t,n)=>i.STATISTICS(e,t,n),3e5)}static async getLeaderboard(e,t,n=100,s){let o={year:e,examType:t};if("BAC"===t&&s?o.sessionType=s:o.sessionType=null,"BAC"!==t)return(await a._.student.findMany({where:{...o,admis:!0},orderBy:{moyenne:"desc"},take:10,select:u.leaderboardSelect})).map(e=>({matricule:e.matricule,nom_complet:e.nom_complet,ecole:e.ecole,etablissement:e.etablissement,moyenne:e.moyenne,rang:e.rang,wilaya:e.wilaya||void 0,moughataa:e.moughataa||void 0,section:e.section,admis:e.admis,decision_text:e.decision_text}));{let e=await a._.student.findMany({where:{...o,admis:!0},orderBy:{moyenne:"desc"},select:u.leaderboardSelect}),t={},n={};for(let n of e){let e=n.section||"Other";t[e]||(t[e]=[]),t[e].push({matricule:n.matricule,nom_complet:n.nom_complet,ecole:n.ecole,etablissement:n.etablissement,moyenne:n.moyenne,rang:n.rang,wilaya:n.wilaya,moughataa:n.moughataa,section:n.section,admis:n.admis,decision_text:n.decision_text})}for(let[e,s]of Object.entries(t)){t[e]=s.slice(0,10);let i={...o};"Other"===e?i.section=null:i.section=e;let r=await a._.student.findMany({where:i,select:u.leaderboardSelect}),l=r.length,c=r.filter(e=>e.admis).length,d=r.reduce((e,t)=>e+t.moyenne,0);n[e]={total:l,admitted:c,totalScore:d}}let s={};for(let[e,a]of Object.entries(t)){let t=n[e];s[e]={students:a,stats:{total:t.total,admitted:t.admitted,admissionRate:t.total>0?Number((t.admitted/t.total*100).toFixed(1)):0,averageScore:t.total>0?Number((t.totalScore/t.total).toFixed(2)):0}}}return s}}static async getStudentsByWilaya(e,t,n){try{let s={wilaya:e,year:t,examType:n};return"BAC"!==n&&(s.sessionType=null),(await a._.student.findMany({where:s,orderBy:{moyenne:"desc"},select:u.studentSelect})).map(d)}catch(e){throw console.error("Error in getStudentsByWilaya:",e),e}}static async getStudentsByWilayaPaginated(e,t,n,s,o,i,r){try{let l={wilaya:e,year:t,examType:n};"BAC"===n&&r?l.sessionType=r:"BAC"!==n&&(l.sessionType=null),"all"!==i&&(l.section=i);let c=await a._.student.count({where:l}),d=await a._.student.findMany({where:l,orderBy:{moyenne:"desc"},skip:(s-1)*o,take:o,select:u.studentSelect}),m={wilaya:e,year:t,examType:n};"BAC"===n&&r?m.sessionType=r:"BAC"!==n&&(m.sessionType=null);let y=await a._.student.findMany({where:m,select:{admis:!0,moyenne:!0,section:!0}}),h=y.filter(e=>e.admis).length,p=y.length>0?y.reduce((e,t)=>e+t.moyenne,0)/y.length:0,w=[...new Set(y.map(e=>e.section))].sort(),g=Math.ceil(c/o);return{students:d.map(e=>({matricule:e.matricule,nom_complet:e.nom_complet,moyenne:e.moyenne,rang:e.rang,admis:e.admis,section:e.section,ecole:e.ecole,etablissement:e.etablissement})),totalCount:c,totalPages:g,currentPage:s,admittedCount:h,averageScore:Number(p.toFixed(2)),sections:w}}catch(e){throw console.error("Error in getStudentsByWilayaPaginated:",e),e}}static async getStudentsBySchool(e,t,n,s,o){try{let i={etablissement:e,year:t,examType:n};return"BAC"===n&&o?i.sessionType=o:"BAC"!==n&&(i.sessionType=null),s&&(i.wilaya=s),(await a._.student.findMany({where:i,orderBy:{moyenne:"desc"},select:u.studentSelect})).map(e=>({matricule:e.matricule,nom_complet:e.nom_complet,moyenne:e.moyenne,rang:e.rang,rang_etablissement:e.rang_etablissement||void 0,admis:e.admis,decision_text:e.decision_text,section:e.section,wilaya:e.wilaya||void 0}))}catch(e){throw console.error("Error in getStudentsBySchool:",e),e}}static async getUploadHistory(){try{return(await a._.dataUpload.findMany({orderBy:{uploadedAt:"desc"}})).map(e=>({...e,examType:e.examType,sessionType:e.sessionType}))}catch(e){throw console.error("Error in getUploadHistory:",e),e}}static async getWilayas(e,t,n){try{let s={year:e,examType:t};"BAC"===t&&n?s.sessionType=n:s.sessionType=null,s.wilaya={not:null};let o=await a._.student.findMany({where:s,select:{wilaya:!0,etablissement:!0},distinct:["wilaya","etablissement"]}),i={};for(let e of o){let t=e.wilaya,n=e.etablissement;i[t]||(i[t]=new Set),i[t].add(n)}let r={};for(let[e,t]of Object.entries(i))r[e]=Array.from(t).sort();return r}catch(e){throw console.error("Error in getWilayas:",e),e}}static async uploadStudents(e){try{let t=[],n=0,s=await a._.$transaction(async a=>{for(let s=0;s<e.length;s+=1e3){let o=e.slice(s,s+1e3),i=Math.floor(s/1e3)+1,r=Math.ceil(e.length/1e3);console.log(`[StudentService] Processing batch ${i}/${r} (${o.length} students)`);try{let e=await a.student.createMany({data:o,skipDuplicates:!0});n+=e.count,console.log(`[StudentService] Batch ${i} successful: ${e.count} students created`)}catch(s){console.log(`[StudentService] Batch ${i} createMany failed: ${s.message}, using upserts`);let e=0;for(let n of o)try{await a.student.upsert({where:{matricule_year_examType_sessionType:{matricule:n.matricule,year:n.year,examType:n.examType,sessionType:n.sessionType||null}},update:n,create:n}),e++}catch(a){let e=`Failed to upsert student ${n.matricule}: ${a.message}`;console.error(e),t.push(e)}n+=e,console.log(`[StudentService] Batch ${i} upserts completed: ${e} students`)}}return{uploadedCount:n,errors:t}},{timeout:3e5,maxWait:1e4});return console.log(`[StudentService] Upload completed. Success: ${s.uploadedCount}, Errors: ${s.errors.length}`),s}catch(e){throw console.error("[StudentService] Transaction failed:",e),Error(`Database transaction failed: ${e.message}`)}}static async saveUploadInfo(e,t,n,s,o){try{await a._.dataUpload.create({data:{year:e,examType:t,sessionType:o||null,fileName:n,studentCount:s,uploadedAt:new Date}}),console.log(`[StudentService] Upload record created: ${n} with ${s} students`)}catch(e){throw console.error("[StudentService] Failed to save upload info:",e),Error(`Failed to save upload info: ${e.message}`)}}}}};
"use strict";exports.id=7964,exports.ids=[7964],exports.modules={7964:(e,n,r)=>{r.d(n,{fromIni:()=>m});var t=r(9308),i=r(6968),o=r(3582);let s=(e,n,t)=>{let o={EcsContainer:async e=>{let{fromHttp:n}=await r.e(4730).then(r.bind(r,4730)),{fromContainerMetadata:o}=await r.e(8087).then(r.bind(r,8087));return t?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,i.tS)(n(e??{}),o(e))().then(a)},Ec2InstanceMetadata:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:n}=await r.e(8087).then(r.bind(r,8087));return async()=>n(e)().then(a)},Environment:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:n}=await Promise.resolve().then(r.bind(r,3590));return async()=>n(e)().then(a)}};if(e in o)return o[e];throw new i.mV(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:t})},a=e=>(0,o.P)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),l=(e,{profile:n="default",logger:r}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(d(e,{profile:n,logger:r})||c(e,{profile:n,logger:r})),d=(e,{profile:n,logger:r})=>{let t="string"==typeof e.source_profile&&void 0===e.credential_source;return t&&r?.debug?.(`    ${n} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),t},c=(e,{profile:n,logger:r})=>{let t="string"==typeof e.credential_source&&void 0===e.source_profile;return t&&r?.debug?.(`    ${n} isCredentialSourceProfile credential_source=${e.credential_source}`),t},_=async(e,n,a,l={})=>{a.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let d=n[e],{source_profile:c,region:_}=d;if(!a.roleAssumer){let{getDefaultRoleAssumer:e}=await r.e(9763).then(r.bind(r,9763));a.roleAssumer=e({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...a?.parentClientConfig,region:_??a?.parentClientConfig?.region}},a.clientPlugins)}if(c&&c in l)throw new i.mV(`Detected a cycle attempting to resolve credentials for profile ${(0,t.Jl)(a)}. Profiles visited: `+Object.keys(l).join(", "),{logger:a.logger});a.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${c?`source_profile=[${c}]`:`profile=[${e}]`}`);let g=c?b(c,n,a,{...l,[c]:!0},f(n[c]??{})):(await s(d.credential_source,e,a.logger)(a))();if(f(d))return g.then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let n={RoleArn:d.role_arn,RoleSessionName:d.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:d.external_id,DurationSeconds:parseInt(d.duration_seconds||"3600",10)},{mfa_serial:r}=d;if(r){if(!a.mfaCodeProvider)throw new i.mV(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:a.logger,tryNextLink:!1});n.SerialNumber=r,n.TokenCode=await a.mfaCodeProvider(r)}let t=await g;return a.roleAssumer(t,n).then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},f=e=>!e.role_arn&&!!e.credential_source,g=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,u=async(e,n)=>r.e(442).then(r.bind(r,442)).then(({fromProcess:r})=>r({...e,profile:n})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_PROCESS","v"))),p=async(e,n,t={})=>{let{fromSSO:i}=await r.e(7248).then(r.bind(r,7248));return i({profile:e,logger:t.logger,parentClientConfig:t.parentClientConfig,clientConfig:t.clientConfig})().then(e=>n.sso_session?(0,o.P)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,o.P)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},y=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),E=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,w=async(e,n)=>{n?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let r={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,o.P)(r,"CREDENTIALS_PROFILE","n")},C=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,I=async(e,n)=>r.e(4812).then(r.bind(r,4812)).then(({fromTokenFile:r})=>r({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),b=async(e,n,r,t={},o=!1)=>{let s=n[e];if(Object.keys(t).length>0&&E(s))return w(s,r);if(o||l(s,{profile:e,logger:r.logger}))return _(e,n,r,t);if(E(s))return w(s,r);if(C(s))return I(s,r);if(g(s))return u(r,e);if(y(s))return await p(e,s,r);throw new i.mV(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:r.logger})},m=(e={})=>async({callerClientConfig:n}={})=>{let r={...e,parentClientConfig:{...n,...e.parentClientConfig}};r.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let i=await (0,t.MX)(r);return b((0,t.Jl)({profile:e.profile??n?.profile}),i,r)}}};
"use strict";(()=>{var e={};e.id=3468,e.ids=[3468],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},5713:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>f,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>x,staticGenerationAsyncStorage:()=>p});var i={};t.r(i),t.d(i,{POST:()=>u,dynamic:()=>d});var s=t(3278),n=t(5002),o=t(4877),a=t(1309),c=t(4738);let d="force-dynamic";async function u(e){try{let{year:t,examType:i,dryRun:s=!0}=await e.json();if(!t||!i)return a.NextResponse.json({error:"Year and examType are required"},{status:400});function r(e){if(!e||"string"!=typeof e)return!1;let r=e.toLowerCase().trim();return!!(r.includes("admis")||r.includes("reussi")||r.includes("reussie")||r.includes("success")||"r"===r||"a"===r||r.includes("pass")||r.includes("valide"))||!(r.includes("sessionnaire")||r.includes("sessionn")||r.includes("session")||r.includes("rattrapage"))&&(r.includes("echec")||r.includes("echoue")||r.includes("refuse")||r.includes("elimine")||r.includes("ajourne")||r.includes("fail")||r.includes("reject"),!1)}console.log(`ðŸ”§ ${s?"Analyzing":"Fixing"} admis logic for ${i} ${t}`);let n=await c._.student.findMany({where:{year:Number(t),examType:i},select:{id:!0,matricule:!0,nom_complet:!0,decision_text:!0,admis:!0}}),o=n.filter(e=>{let t=r(e.decision_text);return e.admis!==t}),d={totalStudents:n.length,incorrectRecords:o.length,correctRecords:n.length-o.length,wouldBeUpdated:o.map(e=>({matricule:e.matricule,nom_complet:e.nom_complet,decision_text:e.decision_text,current_admis:e.admis,should_be_admis:r(e.decision_text)}))};if(s)return a.NextResponse.json({message:"Dry run completed - no changes made",year:t,examType:i,report:d});{if(0===o.length)return a.NextResponse.json({message:"No records need to be updated",year:t,examType:i,report:d});let e=0;for(let t of o){let i=r(t.decision_text);await c._.student.update({where:{id:t.id},data:{admis:i}}),e++}return console.log(`âœ… Updated ${e} student records`),a.NextResponse.json({message:`Successfully updated ${e} student records`,year:t,examType:i,report:{...d,actuallyUpdated:e}})}}catch(e){return console.error("\uD83D\uDCA5 Fix admis error:",e),a.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/admin/fix-admis/route",pathname:"/api/admin/fix-admis",filename:"route",bundlePath:"app/api/admin/fix-admis/route"},resolvedPagePath:"D:\\WORK\\FREELANCER\\student-result-upgraded\\app\\api\\admin\\fix-admis\\route.ts",nextConfigOutput:"standalone",userland:i}),{requestAsyncStorage:m,staticGenerationAsyncStorage:p,serverHooks:x}=l,g="/api/admin/fix-admis/route";function f(){return(0,o.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:p})}},4738:(e,r,t)=>{t.d(r,{_:()=>n});var i=t(3524);let s=globalThis,n=(()=>{if(process.env.DATABASE_URL)return s.prisma??new i.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}},__internal:{engine:{connectionLimit:5,queryTimeout:15e3,connectionTimeout:5e3,pool:{min:1,max:5,acquireTimeoutMillis:15e3,createTimeoutMillis:15e3,destroyTimeoutMillis:3e3,idleTimeoutMillis:15e3,reapIntervalMillis:500,createRetryIntervalMillis:100}}}})})();n&&process.on("beforeExit",async()=>{try{await Promise.race([n.$disconnect(),new Promise(e=>setTimeout(e,5e3))])}catch(e){console.error("Error disconnecting Prisma:",e)}}),process.on("uncaughtException",async e=>{console.error("Uncaught Exception:",e);try{n&&await n.$disconnect()}catch(e){console.error("Error disconnecting Prisma on uncaught exception:",e)}process.exit(1)})}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),i=r.X(0,[9379,4833],()=>t(5713));module.exports=i})();
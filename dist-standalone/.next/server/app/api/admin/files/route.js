"use strict";(()=>{var e={};e.id=182,e.ids=[182],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8613:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>f,patchFetch:()=>x,requestAsyncStorage:()=>m,routeModule:()=>p,serverHooks:()=>g,staticGenerationAsyncStorage:()=>y});var s={};r.r(s),r.d(s,{DELETE:()=>c,GET:()=>d,dynamic:()=>u});var a=r(3278),o=r(5002),n=r(4877),i=r(1309),l=r(4738);let u="force-dynamic";async function d(){try{if(console.log("\uD83D\uDCE5 Files list request received"),!process.env.DATABASE_URL)return console.error("❌ DATABASE_URL not configured"),i.NextResponse.json({error:"Database not configured"},{status:500});let e=await l._.dataUpload.findMany({orderBy:{uploadedAt:"desc"}});if(console.log(`📁 Found ${e.length} files in dataUpload table`),0===e.length)return i.NextResponse.json({success:!0,files:[],totalFiles:0,message:"Aucun fichier trouv\xe9"});let t=await Promise.all(e.map(async e=>{try{console.log(`📊 Processing stats for ${e.examType} ${e.year}`);let t={year:e.year,examType:e.examType};e.sessionType&&(t.sessionType=e.sessionType);let[r,s]=await Promise.all([l._.student.aggregate({where:t,_count:{_all:!0},_avg:{moyenne:!0}}),l._.student.count({where:{...t,admis:!0}})]),a=r._count._all,o=r._avg.moyenne||0,n=a>0?Number((s/a*100).toFixed(1)):0,i=.5*a,u=i<1024?`${i.toFixed(0)} KB`:`${(i/1024).toFixed(1)} MB`;return{id:e.id,fileName:e.fileName,year:e.year,examType:e.examType,sessionType:e.sessionType,studentCount:a,admittedCount:s,admissionRate:n,averageScore:Number(o.toFixed(2)),uploadedAt:e.uploadedAt,sizeFormatted:u,status:a>0?"active":"no_data"}}catch(t){return console.error(`❌ Error processing upload ${e.id}:`,t),{id:e.id,fileName:e.fileName,year:e.year,examType:e.examType,sessionType:e.sessionType,studentCount:0,admittedCount:0,admissionRate:0,averageScore:0,uploadedAt:e.uploadedAt,sizeFormatted:"0 KB",status:"error"}}}));return console.log(`✅ Successfully processed ${t.length} files`),i.NextResponse.json({success:!0,files:t,totalFiles:t.length,message:`${t.length} fichier(s) trouv\xe9(s)`,serverTime:new Date().toISOString()})}catch(e){return console.error("❌ Error fetching files:",e),console.error("❌ Stack trace:",e.stack),i.NextResponse.json({success:!1,error:"Erreur lors de la r\xe9cup\xe9ration des fichiers",details:"Internal server error",serverTime:new Date().toISOString()},{status:500})}finally{await l._.$disconnect()}}async function c(e){try{console.log("\uD83D\uDDD1️ Delete file request received");let t=new URL(e.url),r=t.searchParams.get("id"),s=t.searchParams.get("year"),a=t.searchParams.get("examType");if(!r&&(!s||!a))return i.NextResponse.json({error:"Provide either uploadId or year+examType"},{status:400});let o=0,n=!1;if(r){let e=await l._.dataUpload.findUnique({where:{id:r}});if(!e)return i.NextResponse.json({error:"Upload not found"},{status:404});o=await l._.$transaction(async t=>{let s=await t.student.deleteMany({where:{year:e.year,examType:e.examType,sessionType:e.sessionType}});return await t.dataUpload.delete({where:{id:r}}),s.count}),n=!0,console.log(`✅ Deleted upload ${r} and ${o} students`)}else{let e=await l._.$transaction(async e=>{let t=await e.student.deleteMany({where:{year:Number(s),examType:a}}),r=await e.dataUpload.deleteMany({where:{year:Number(s),examType:a}});return{students:t.count,uploads:r.count}});o=e.students,n=e.uploads>0,console.log(`✅ Deleted ${e.uploads} upload(s) and ${o} students for ${a} ${s}`)}return i.NextResponse.json({success:!0,deletedStudents:o,deletedUpload:n,message:`Successfully deleted ${o} student records${n?" and upload info":""}`})}catch(e){return console.error("❌ Error deleting file:",e),i.NextResponse.json({success:!1,error:"Erreur lors de la suppression",details:"Internal server error"},{status:500})}finally{await l._.$disconnect()}}let p=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/admin/files/route",pathname:"/api/admin/files",filename:"route",bundlePath:"app/api/admin/files/route"},resolvedPagePath:"D:\\WORK\\FREELANCER\\student-result-upgraded\\app\\api\\admin\\files\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:y,serverHooks:g}=p,f="/api/admin/files/route";function x(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:y})}},4738:(e,t,r)=>{r.d(t,{_:()=>o});var s=r(3524);let a=globalThis,o=(()=>{if(process.env.DATABASE_URL)return a.prisma??new s.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}},__internal:{engine:{connectionLimit:5,queryTimeout:15e3,connectionTimeout:5e3,pool:{min:1,max:5,acquireTimeoutMillis:15e3,createTimeoutMillis:15e3,destroyTimeoutMillis:3e3,idleTimeoutMillis:15e3,reapIntervalMillis:500,createRetryIntervalMillis:100}}}})})();o&&process.on("beforeExit",async()=>{try{await Promise.race([o.$disconnect(),new Promise(e=>setTimeout(e,5e3))])}catch(e){console.error("Error disconnecting Prisma:",e)}}),process.on("uncaughtException",async e=>{console.error("Uncaught Exception:",e);try{o&&await o.$disconnect()}catch(e){console.error("Error disconnecting Prisma on uncaught exception:",e)}process.exit(1)})}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9379,4833],()=>r(8613));module.exports=s})();
"use strict";(()=>{var e={};e.id=4333,e.ids=[4333],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7919:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>c,patchFetch:()=>y,requestAsyncStorage:()=>m,routeModule:()=>u,serverHooks:()=>x,staticGenerationAsyncStorage:()=>l});var a={};r.r(a),r.d(a,{DELETE:()=>d});var s=r(3278),n=r(5002),i=r(4877),o=r(1309);let p=new(r(3524)).PrismaClient;async function d(e,{params:t}){try{let{id:e}=t,r=await p.examType.findUnique({where:{id:e}});if(!r)return o.NextResponse.json({error:"Exam type not found"},{status:404});let a=await p.student.count({where:{examType:r.code,year:r.year,sessionType:r.sessionType}});if(a>0)return o.NextResponse.json({error:`Cannot delete exam type. There are ${a} students associated with this exam type. Please delete the student data first.`},{status:400});return await p.examType.delete({where:{id:e}}),o.NextResponse.json({success:!0,message:`Exam type "${r.name}" deleted successfully`})}catch(e){return console.error("Error deleting exam type:",e),o.NextResponse.json({error:"Failed to delete exam type"},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/admin/exam-types/[id]/route",pathname:"/api/admin/exam-types/[id]",filename:"route",bundlePath:"app/api/admin/exam-types/[id]/route"},resolvedPagePath:"D:\\WORK\\FREELANCER\\student-result-upgraded\\app\\api\\admin\\exam-types\\[id]\\route.ts",nextConfigOutput:"standalone",userland:a}),{requestAsyncStorage:m,staticGenerationAsyncStorage:l,serverHooks:x}=u,c="/api/admin/exam-types/[id]/route";function y(){return(0,i.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:l})}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[9379,4833],()=>r(7919));module.exports=a})();